


import java.util.*;

class Node {
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}


public class TestDamo {
	
	 

	public Node createTree() {
		Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        //Node H = new Node('H');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        C.left = F;
        C.right = G;
        //E.right = H;
        return A;
	}


	//前序遍历
		public static void preOrderTraversal (Node root) {
			if(root==null) return;
			
			System.out.print(root.val+ " ");
			preOrderTraversal(root.left);
			preOrderTraversal(root.right);
		}
		
		
		//中序遍历
		public static void inOrderTraversal(Node root) {
			if(root==null) return;
			
			inOrderTraversal(root.left);
			System.out.print(root.val+ " ");
			inOrderTraversal(root.right);
		}
		
		//后序遍历
		public static void postOrderTraversal(Node root) {
			if(root==null) return;
			
			postOrderTraversal(root.left);
			postOrderTraversal(root.right);
			System.out.print(root.val+ " ");
			
		}
		
		//非递归版本 先序
		public static void preOrderTraversalNor(Node root) {
			if(root==null) return;
			
			if(root!=null) {
				Stack<Node> stack=new Stack<>();
				stack.push(root);
				
				while (!stack.empty()) {
					root=stack.pop();
					System.out.print(root.val+" ");
					if(root.right!=null) {
						stack.push(root.right);
					}
					if(root.left!=null) {
						stack.push(root.left);
					}
					
				}
			}
			System.out.println();
			
		}
		
		//非递归，中序
		public static void inOrderTraversalNor(Node root) {
			if(root==null) return;
			
			Stack<Node> stack=new Stack<>();
			while (!stack.empty() || root!=null) {
				if(root!=null) {
					stack.push(root);
					root=root.left;
				} else {
					root=stack.pop();
					System.out.print(root.val+" ");
					root=root.right;
				}
				
			
			}
			
		}
		
		//非递归 后序
		public static void postOrderTraversalNor(Node root) {
			if(root==null) return;
			
			
				Stack<Node> stack1=new Stack<>();
				Stack<Node> stack2=new Stack<>();
				stack1.push(root);
				while (!stack1.empty()) {
					root=stack1.pop();
					stack2.push(root);
					if(root.left!=null) {
						stack1.push(root.left);
						
					}
					if(root.right!=null) {
						stack1.push(root.right);
					}
				}
				while (!stack2.empty()) {
					System.out.print(stack2.pop().val+ " ");
				}
			
			System.out.println();
		}

		

}
